<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>exile</title>
      <link href="2021/01/19/exile/"/>
      <url>2021/01/19/exile/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b354b694aaf0440596634d09cbe49d5451365f17d7ef4d991d4063f6bcb95440">5220daf222370ec911967d23703a66d9c4891515d22dbdb6f44e2f2558f30e764500ca4cf125a08e91c43cad70c96491591ce934d5f0df11d12c7e8355e647d076fecb9af6ab574279cc8065212b182539c23deaf1b92d343bb0e0a8f829edf05afaf7dbebc8aa1d34be2c7e3513a7862fc471bcb8da482b3362f79652e7510516921a2c818757b65d3b9e86505724340a446470ef7c40a9c3e83e892ddc877350e91b0a3cdcab60af91dbb5b333088a44a9202af94fbcd0ad4c31073a10a0d517982626821d2c62db9b1ec28a08ca1594093d62f7f76512c6ca2d51c27096c7c1b6479047efbccbd361002d6bfb77a55cfdcd9aa8016932739a8c20899e8cce</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="2021/01/09/%E6%8E%92%E5%BA%8F/"/>
      <url>2021/01/09/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>交换、选择、归并<br>快速排序算法<br>堆排序算法</p><a id="more"></a><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    KeyType  key<span class="token punctuation">;</span>   <span class="token comment">//关键字</span>    <span class="token comment">//InfoType info;  //其他信息</span><span class="token punctuation">&#125;</span>RecordType<span class="token punctuation">,</span> <span class="token operator">*</span>RType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    RecordType <span class="token operator">*</span>r<span class="token punctuation">;</span>   <span class="token comment">//顺序表，0号空置</span>    <span class="token keyword">int</span>        len<span class="token punctuation">;</span>                 <span class="token comment">//长度</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span>istream <span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span> istream <span class="token operator">&amp;</span>in<span class="token punctuation">,</span> RecordType <span class="token operator">&amp;</span>r <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    in <span class="token operator">>></span>r<span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token comment">//in >>r.info;</span>    <span class="token keyword">return</span> in<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ostream <span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span> ostream <span class="token operator">&amp;</span>out<span class="token punctuation">,</span> RecordType <span class="token operator">&amp;</span>r <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    out<span class="token operator">&lt;&lt;</span><span class="token comment">/*"keyword"&lt;&lt;*/</span>r<span class="token punctuation">.</span>key<span class="token comment">/*&lt;&lt;" "&lt;&lt;"其他信息"&lt;&lt;r.info*/</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Create</span><span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//创建</span>    <span class="token comment">//cout&lt;&lt;"create"&lt;&lt;"创建"&lt;&lt;endl;</span>    L<span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token punctuation">(</span>RecordType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> LISTINITSIZE <span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>RecordType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//申请存储空间</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"length"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span>l<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        cin <span class="token operator">>></span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>len <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Show</span><span class="token punctuation">(</span> SqList L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span>  <span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">///交换排序</span><span class="token keyword">void</span> <span class="token function">BubbleSord</span><span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    RecordType  temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span>  i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">></span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                temp     <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span>   <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">///选择排序</span><span class="token keyword">void</span> <span class="token function">SelectSort</span><span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    RecordType temp<span class="token punctuation">;</span>    KeyType  min<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>        k <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>len<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> min <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                min  <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        temp     <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span>   <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">///归并排序</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SqList T<span class="token punctuation">;</span><span class="token comment">//辅助</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    i <span class="token operator">=</span> low<span class="token punctuation">;</span>    j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//从小到大</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> high <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            T<span class="token punctuation">.</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            T<span class="token punctuation">.</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//剩余的</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> i <span class="token operator">&lt;=</span> mid <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        T<span class="token punctuation">.</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> j <span class="token operator">&lt;=</span> high <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        T<span class="token punctuation">.</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//迁移</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> T<span class="token punctuation">.</span>r<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MSort</span><span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> len <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//从 1 开始 2 倍增长</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>len <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>len <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Merge</span><span class="token punctuation">(</span> L<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">+</span> len <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>len <span class="token punctuation">)</span><span class="token comment">//最后两个</span>        <span class="token function">Merge</span><span class="token punctuation">(</span>  L<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> L<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> L<span class="token punctuation">.</span>len<span class="token punctuation">;</span> l <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> l <span class="token punctuation">)</span>        <span class="token function">MSort</span><span class="token punctuation">(</span> L<span class="token punctuation">,</span> l <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">///*********T3.快速排序**********///</span><span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    KeyType Pivotkey<span class="token punctuation">;</span>   <span class="token comment">//枢轴</span>    RecordType temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>    Pivotkey <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> low <span class="token operator">&lt;</span> high <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//两端扫描</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">>=</span> Pivotkey <span class="token punctuation">)</span>    <span class="token comment">//从后往前直到比枢轴小</span>            high<span class="token operator">--</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//交换</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;=</span> Pivotkey <span class="token punctuation">)</span>     <span class="token comment">//从前往后直到比枢轴大</span>            low<span class="token operator">++</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//交换</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">//跳出后low和high相会</span>    L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token comment">//记录枢轴的位置</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//一趟快排后分成两段</span><span class="token keyword">void</span> <span class="token function">QSort</span><span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//对两段进行递归</span>    KeyType Pivotkey<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> low <span class="token operator">&lt;</span> high <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Pivotkey <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span> L<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//一趟</span>        <span class="token function">QSort</span><span class="token punctuation">(</span> L<span class="token punctuation">,</span> low<span class="token punctuation">,</span> Pivotkey <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//前半段</span>        <span class="token function">QSort</span><span class="token punctuation">(</span> L<span class="token punctuation">,</span> Pivotkey <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//后半段</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">QSort</span><span class="token punctuation">(</span> L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> L<span class="token punctuation">.</span>len <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">///*********T4.堆排序**********//</span><span class="token keyword">void</span> <span class="token function">HeapAdjust</span><span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    RecordType temp <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> j <span class="token operator">&lt;=</span> high <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> high <span class="token operator">&amp;&amp;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span>  <span class="token comment">//在左右子树中选最大的</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> temp<span class="token punctuation">.</span>key <span class="token operator">>=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token punctuation">)</span>                        <span class="token comment">//比左右都大,无需交换</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> j<span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span> SqList <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    RecordType temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> L<span class="token punctuation">.</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">)</span><span class="token comment">//建立大顶堆</span>        <span class="token function">HeapAdjust</span><span class="token punctuation">(</span> L<span class="token punctuation">,</span> i<span class="token punctuation">,</span> L<span class="token punctuation">.</span>len <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//自下往上</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> L<span class="token punctuation">.</span>len<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment">//首尾交换</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token function">HeapAdjust</span><span class="token punctuation">(</span> L<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//重新调整</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉排序树</title>
      <link href="2021/01/09/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/"/>
      <url>2021/01/09/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>实现二叉排序树的插入和删除。</p><a id="more"></a><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>KeyTypekey<span class="token punctuation">;</span><span class="token comment">//key word</span><span class="token comment">//InfoType data;//information</span><span class="token keyword">struct</span><span class="token class-name">node</span><span class="token operator">*</span>left<span class="token punctuation">,</span><span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token comment">//左右孩子指针</span><span class="token punctuation">&#125;</span>BSTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BSTTree<span class="token punctuation">;</span>BSTTree <span class="token function">BSTSearch</span><span class="token punctuation">(</span> BSTTree T<span class="token punctuation">,</span> KeyType k <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//search</span>    <span class="token comment">//BSTTree p;</span>    <span class="token comment">//while(p)</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>T <span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> k <span class="token operator">==</span> T<span class="token operator">-></span>key <span class="token punctuation">)</span><span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> k <span class="token operator">&lt;</span> T<span class="token operator">-></span>key <span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">BSTSearch</span><span class="token punctuation">(</span> T<span class="token operator">-></span>left<span class="token punctuation">,</span> k <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p = p->left;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token function">BSTSearch</span><span class="token punctuation">(</span> T<span class="token operator">-></span>right<span class="token punctuation">,</span> k <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p = p->right;</span><span class="token punctuation">&#125;</span>Status <span class="token function">InOrderShowTree</span><span class="token punctuation">(</span> BSTTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//中序遍历展示二叉排序树</span><span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">InOrderShowTree</span><span class="token punctuation">(</span> T<span class="token operator">-></span>left <span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>T<span class="token operator">-></span>key<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token function">InOrderShowTree</span><span class="token punctuation">(</span> T<span class="token operator">-></span>right <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">LevelShowTree</span><span class="token punctuation">(</span> BSTTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//层次遍历展示二叉排序树</span>BSTTree p<span class="token punctuation">;</span>    BSTTree qu<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//定义队列，存放二叉树结点指针</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">;</span>    front <span class="token operator">=</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//初始化队列</span>    qu<span class="token punctuation">[</span> rear <span class="token punctuation">]</span>   <span class="token operator">=</span> T<span class="token punctuation">;</span>       <span class="token comment">//根结点入队</span>    rear<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> front <span class="token operator">!=</span> rear <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> qu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">//队头出队</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span> front <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-></span>key<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>      <span class="token comment">//访问队头结点</span>        <span class="token comment">///拉孩子入队</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>left <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  <span class="token comment">//存在左孩子</span>        <span class="token punctuation">&#123;</span>            qu<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>left<span class="token punctuation">;</span><span class="token comment">//左孩子入队</span>            rear <span class="token operator">=</span> <span class="token punctuation">(</span> rear <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>right <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  <span class="token comment">//若存在右孩子</span>        <span class="token punctuation">&#123;</span>            qu<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>right<span class="token punctuation">;</span><span class="token comment">//右孩子入队</span>            rear <span class="token operator">=</span> <span class="token punctuation">(</span> rear <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">BSTInsert</span><span class="token punctuation">(</span> BSTTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span> KeyType k <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//empty</span>T <span class="token operator">=</span> <span class="token punctuation">(</span> BSTNode<span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> BSTNode <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>T<span class="token operator">-></span>key<span class="token operator">=</span> k<span class="token punctuation">;</span>T<span class="token operator">-></span>left<span class="token operator">=</span> T<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> k <span class="token operator">&lt;</span> T<span class="token operator">-></span>key <span class="token punctuation">)</span><span class="token function">BSTInsert</span><span class="token punctuation">(</span> T<span class="token operator">-></span>left<span class="token punctuation">,</span> k <span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">BSTInsert</span><span class="token punctuation">(</span> T<span class="token operator">-></span>right<span class="token punctuation">,</span> k <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>BSTTree <span class="token function">CreateBSTTree</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//create</span>BSTTree T<span class="token punctuation">;</span><span class="token keyword">int</span>i<span class="token punctuation">;</span>T<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>KeyTypekey<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span>key<span class="token punctuation">;</span><span class="token comment">//key word</span><span class="token function">BSTInsert</span><span class="token punctuation">(</span> T<span class="token punctuation">,</span> key <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">BSTDelete</span><span class="token punctuation">(</span> BSTTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span> KeyType k <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//删除结点</span>    BSTTree p <span class="token operator">=</span> T<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> q<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> Ftemp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>T <span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token comment">///1.find it</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> p <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>key <span class="token operator">==</span> k <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> k <span class="token operator">&lt;</span> p<span class="token operator">-></span>key <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            p   <span class="token operator">=</span> p<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> k <span class="token operator">></span> p<span class="token operator">-></span>key <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            pre <span class="token operator">=</span> p<span class="token punctuation">;</span>            p   <span class="token operator">=</span> p<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">///delete</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>p<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token operator">-></span>right <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//leaf</span>        pre<span class="token operator">-></span>left <span class="token operator">==</span> p <span class="token operator">?</span> pre<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token constant">NULL</span> <span class="token operator">:</span> pre<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p   <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>p<span class="token operator">-></span>left <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//only right</span>        q <span class="token operator">=</span> p<span class="token punctuation">;</span>        pre<span class="token operator">-></span>left <span class="token operator">==</span> p <span class="token operator">?</span> pre<span class="token operator">-></span>left <span class="token operator">=</span> p<span class="token operator">-></span>right <span class="token operator">:</span> pre<span class="token operator">-></span>right <span class="token operator">=</span> p<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span> q <span class="token punctuation">)</span><span class="token punctuation">;</span>        q <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>p<span class="token operator">-></span>right <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//only left</span>        q <span class="token operator">=</span> p<span class="token punctuation">;</span>        pre<span class="token operator">-></span>left <span class="token operator">==</span> p <span class="token operator">?</span> pre<span class="token operator">-></span>left <span class="token operator">=</span> p<span class="token operator">-></span>left <span class="token operator">:</span> pre<span class="token operator">-></span>right <span class="token operator">=</span> p<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span> q <span class="token punctuation">)</span><span class="token punctuation">;</span>        q <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//two</span>        temp <span class="token operator">=</span> p<span class="token operator">-></span>left<span class="token punctuation">;</span>         <span class="token comment">//左子树</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> temp<span class="token operator">-></span>right <span class="token punctuation">)</span>    <span class="token comment">//的最右</span>        <span class="token punctuation">&#123;</span>            Ftemp <span class="token operator">=</span> temp<span class="token punctuation">;</span>            temp  <span class="token operator">=</span> temp<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        KeyType k <span class="token operator">=</span> temp<span class="token operator">-></span>key<span class="token punctuation">;</span>  <span class="token comment">//A.</span>        <span class="token function">BSTDelete</span><span class="token punctuation">(</span> T<span class="token punctuation">,</span> temp<span class="token operator">-></span>key <span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>             <span class="token comment">//B.可重载 =</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉排序树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra</title>
      <link href="2021/01/09/Dijkstra/"/>
      <url>2021/01/09/Dijkstra/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编程实现Dijkstra算法</p><a id="more"></a><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">MIN</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> min <span class="token operator">=</span> INFINITY<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            min <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">MAX</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max <span class="token punctuation">)</span>            max <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">Excel</span><span class="token punctuation">(</span> MGraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>D<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>P<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>F <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>VexNum<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>VexNum<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>D<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>VexNum<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>VexNum<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>F<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">Dijkstra</span><span class="token punctuation">(</span> MGraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> Start <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> Dist<span class="token punctuation">[</span>V_MAX<span class="token punctuation">]</span><span class="token punctuation">,</span> Path<span class="token punctuation">[</span>V_MAX<span class="token punctuation">]</span><span class="token punctuation">,</span> Flag<span class="token punctuation">[</span>V_MAX<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span>V_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> MinDist<span class="token punctuation">,</span> v<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>VexNum<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">///初始化</span>        Flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arcs<span class="token punctuation">[</span>Start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> INFINITY <span class="token punctuation">)</span>            Path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Start<span class="token punctuation">;</span>        <span class="token keyword">else</span>            Path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Flag<span class="token punctuation">[</span>Start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment">//选中起始点</span>    Path<span class="token punctuation">[</span>Start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Dist<span class="token punctuation">[</span>Start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//Excel( G, Dist, Path, Flag );</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>VexNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//</span>        k <span class="token operator">=</span> <span class="token function">MIN</span><span class="token punctuation">(</span> Dist<span class="token punctuation">,</span> Flag<span class="token punctuation">,</span> G<span class="token punctuation">.</span>VexNum <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//找到 flag 为 false 的最小值</span>        Flag<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment">//选中</span>        MinDist <span class="token operator">=</span> Dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token comment">//当前最短路径</span>        <span class="token comment">//cout&lt;&lt;"!"&lt;&lt;k&lt;&lt;endl;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> MinDist <span class="token operator">&lt;</span> INFINITY <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>   <span class="token comment">//更新距离</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>VexNum<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> Flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> Dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> MinDist <span class="token operator">+</span> G<span class="token punctuation">.</span>arcs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>   <span class="token comment">//有更小且尚未被选中，更新</span>                    Dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> MinDist <span class="token operator">+</span> G<span class="token punctuation">.</span>arcs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    Path<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token comment">//记录路径</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Excel( G, Dist, Path, Flag );</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//输出</span>    <span class="token function">Excel</span><span class="token punctuation">(</span> G<span class="token punctuation">,</span> Dist<span class="token punctuation">,</span> Path<span class="token punctuation">,</span> Flag <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>VexNum<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">!=</span> Start <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            v <span class="token operator">=</span> Path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>VexNum<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> v <span class="token operator">==</span> Start <span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                v <span class="token operator">=</span> Path<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Start<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"从顶点 "</span><span class="token operator">&lt;&lt;</span>Start<span class="token operator">&lt;&lt;</span><span class="token string">" 到顶点 "</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" 的最短距离为 "</span><span class="token operator">&lt;&lt;</span>Dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">", "</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"最短路径为 "</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span> <span class="token punctuation">)</span>                cout<span class="token operator">&lt;&lt;</span>temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"->"</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"。"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>孩子-兄弟树 输出第i层</title>
      <link href="2021/01/09/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E6%A0%91%E8%BE%93%E5%87%BA%E7%AC%ACi%E5%B1%82/"/>
      <url>2021/01/09/%E5%AD%A9%E5%AD%90%E5%85%84%E5%BC%9F%E6%A0%91%E8%BE%93%E5%87%BA%E7%AC%ACi%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编写函数，对一棵以孩子-兄弟链表表示的树，输出第i层的所有元素。</p><a id="more"></a><pre class="language-cpp" data-language="cpp"><code class="language-cpp">Status <span class="token function">LevelElements</span><span class="token punctuation">(</span> BiTree T<span class="token punctuation">,</span> <span class="token keyword">int</span> l <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BiTree p<span class="token punctuation">;</span>    BiTree qu<span class="token punctuation">[</span> MAX_SIZE <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> PreNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> CurNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    qu<span class="token punctuation">[</span> rear <span class="token punctuation">]</span> <span class="token operator">=</span> T<span class="token punctuation">;</span>    rear <span class="token operator">=</span> i <span class="token operator">=</span> PreNum <span class="token operator">=</span> CurNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> front <span class="token operator">!=</span> rear <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        PreNum <span class="token operator">=</span> CurNum<span class="token punctuation">;</span><span class="token comment">//每次开始要初始化</span>        CurNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">==</span> l <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> PreNum <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>   <span class="token comment">//上一层出队，下一层入队</span>            p <span class="token operator">=</span> qu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>            front <span class="token operator">=</span> <span class="token punctuation">(</span> front <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  <span class="token comment">//存在左孩子</span>            <span class="token punctuation">&#123;</span>                qu<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span><span class="token comment">//左孩子入队</span>                rear <span class="token operator">=</span> <span class="token punctuation">(</span> rear <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>                CurNum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            PreNum<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>   <span class="token comment">//把兄弟拉入队</span>            p <span class="token operator">=</span> qu<span class="token punctuation">[</span>front <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  <span class="token comment">//存在兄弟</span>            <span class="token punctuation">&#123;</span>                qu<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span><span class="token comment">//兄弟入队</span>                rear <span class="token operator">=</span> <span class="token punctuation">(</span> rear <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>                CurNum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                    <span class="token comment">//直至无兄弟</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> front <span class="token operator">==</span> rear <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//说明超出层数</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"超出层数!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> front <span class="token operator">!=</span> rear <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> qu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span> front <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 孩子兄弟树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的宽度</title>
      <link href="2021/01/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AE%BD%E5%BA%A6/"/>
      <url>2021/01/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AE%BD%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编写函数，对二叉链表结构的二叉树，求宽度。</p><a id="more"></a><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">BiTreeWidth</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//利用层次遍历</span>    BiTree p<span class="token punctuation">;</span>    BiTree qu<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//定义队列，存放二叉树结点指针</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> LevWid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> MaxWid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    front <span class="token operator">=</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//初始化队列</span>    qu<span class="token punctuation">[</span> rear <span class="token punctuation">]</span>   <span class="token operator">=</span> T<span class="token punctuation">;</span>       <span class="token comment">//根结点入队</span>    rear<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> front <span class="token operator">!=</span> rear <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        l <span class="token operator">=</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> l <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> qu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">//队头出队</span>            front <span class="token operator">=</span> <span class="token punctuation">(</span> front <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>            len<span class="token operator">--</span><span class="token punctuation">;</span>            l<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment">///拉孩子入队</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  <span class="token comment">//存在左孩子</span>            <span class="token punctuation">&#123;</span>                qu<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span><span class="token comment">//左孩子入队</span>                rear <span class="token operator">=</span> <span class="token punctuation">(</span> rear <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>                len<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  <span class="token comment">//若存在右孩子</span>            <span class="token punctuation">&#123;</span>                qu<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span><span class="token comment">//右孩子入队</span>                rear <span class="token operator">=</span> <span class="token punctuation">(</span> rear <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>                len<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        MaxWid <span class="token operator">=</span> <span class="token punctuation">(</span> MaxWid <span class="token operator">></span> len <span class="token operator">?</span> MaxWid <span class="token operator">:</span> len <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> MaxWid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断完全二叉树</title>
      <link href="2021/01/09/%E5%88%A4%E6%96%AD%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2021/01/09/%E5%88%A4%E6%96%AD%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编写函数，判断给定的二叉树是否是完全二叉树。（习题集6.49）</p><a id="more"></a><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">IsComplete</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    BiTree p<span class="token punctuation">,</span> q<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//q为队列，用作层次遍历</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token comment">//n1表示度为 0 的结点被访问，记为 1  //一旦为 1 则后面遍历则不应该出现有分支的结点</span>    q<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> T<span class="token punctuation">;</span>          <span class="token comment">//根节点入队</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> front <span class="token operator">!=</span> rear <span class="token punctuation">)</span>  <span class="token comment">//不为空</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> q<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//队头出列</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>p<span class="token operator">-></span>lchild <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token operator">-></span>rchild <span class="token punctuation">)</span>      <span class="token comment">//度为 0 —— 若为叶节点</span>            n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>p<span class="token operator">-></span>lchild <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>rchild <span class="token punctuation">)</span>  <span class="token comment">//度为 1 —— 只有右分支</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                   <span class="token comment">//不完全</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>lchild <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p<span class="token operator">-></span>rchild <span class="token punctuation">)</span>  <span class="token comment">//度为 1 —— 只有左分支</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>n1 <span class="token punctuation">)</span>           <span class="token comment">//说明叶结点在该结点（有左分支）之前出现</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">//不完全</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>   <span class="token comment">//左孩子入队</span>                n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>                rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>                                <span class="token comment">//度为 2 —— 左右都有</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> n1 <span class="token punctuation">)</span>            <span class="token comment">//说明叶结点在该结点（有分支）之前出现</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">//不完全</span>            <span class="token comment">///左右孩子入队</span>            q<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>            rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>            q<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>            rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//遍历完后通过所有判断，说明完全二叉树</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树删除节点x</title>
      <link href="2021/01/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9X/"/>
      <url>2021/01/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9X/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>设二叉树采用二叉链表存储，编写函数，<br>对二叉树中每个元素值为x的结点，<br>删除以它为根的子树，并释放相应空间。<br>（习题集6.45）</p><a id="more"></a><pre class="language-cpp" data-language="cpp"><code class="language-cpp">BiTree <span class="token function">PreOrderDelete</span><span class="token punctuation">(</span>BiTree <span class="token operator">&amp;</span>T<span class="token punctuation">,</span>ElemType e<span class="token punctuation">,</span><span class="token keyword">int</span> tag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//递归  //tag作为辅助标志，判断当前结点是否需要删除（x 的子孙结点）</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token punctuation">)</span> <span class="token comment">//T不为空</span>    <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span> T<span class="token operator">-></span>data <span class="token operator">!=</span> e <span class="token operator">&amp;&amp;</span> tag <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>   <span class="token comment">//T不是值为 x 的结点，且不是 x 结点的子孙结点 //只进行先序遍历</span>T<span class="token operator">-></span>lchild <span class="token operator">=</span> <span class="token function">PreOrderDelete</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>T<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token function">PreOrderDelete</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>   <span class="token comment">//当前结点为要删除的结点</span><span class="token comment">//T的子孙结点都需要删除，从这里开始，后续传入的 tag 值都将为 1</span>T<span class="token operator">-></span>lchild <span class="token operator">=</span> <span class="token function">PreOrderDelete</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>T<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token function">PreOrderDelete</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token comment">//设置这个返回当前结点主要是为了将 x 的父结点指向 x 的指针设置为NULL</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 删除 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉链表的遍历输出</title>
      <link href="2021/01/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E8%BE%93%E5%87%BA/"/>
      <url>2021/01/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>实现二叉树的先序、中序、后序遍历，<br>用递归和非递归方法；<br>实现层次遍历。</p><a id="more"></a><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">///递归遍历///</span>Status <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//先序遍历 rLR</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>T<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Status <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//LrR</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>T<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Status <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//LRr</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>T<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">///非递归///</span>Status  <span class="token function">NonPreOrderTraverse</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//rLR</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span>BiTree<span class="token operator">></span> s<span class="token punctuation">;</span>    <span class="token comment">//栈</span>    BiTree p <span class="token operator">=</span> T<span class="token punctuation">;</span>       <span class="token comment">//指向根</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token comment">//栈和指针均不为空</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>   <span class="token comment">//不断向左探，直至左孩子为空</span>            cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span> <span class="token comment">//输出    //r</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//入栈</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>      <span class="token comment">//左探    //L</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//p此时为左孩子为空的结点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>   <span class="token comment">//p指向p的右孩子</span>            p <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>                <span class="token comment">//R</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">NonInOrderTraverse</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//LrR</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span>BiTree<span class="token operator">></span> s<span class="token punctuation">;</span>    BiTree p <span class="token operator">=</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>      <span class="token comment">//L</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span> <span class="token comment">//r</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>      <span class="token comment">//L</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">NonPostOrderTraverse</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//LRr</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span>BiTree<span class="token operator">></span> s<span class="token punctuation">;</span>    BiTree pCur<span class="token punctuation">,</span> pPre<span class="token punctuation">;</span>    pCur <span class="token operator">=</span> T<span class="token punctuation">;</span>    pPre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">//上一个结点，便于确认左右孩子是否被访问</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> pCur <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        pCur <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> pCur<span class="token operator">-></span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pCur<span class="token operator">-></span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span> pPre <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> pPre <span class="token operator">==</span> pCur<span class="token operator">-></span>lchild <span class="token operator">||</span> pPre <span class="token operator">==</span> pCur<span class="token operator">-></span>rchild <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token comment">//  1.左右孩子都不存在                                    2.表示左右孩子被访问过</span>        <span class="token punctuation">&#123;</span>   <span class="token comment">//直接访问</span>            cout<span class="token operator">&lt;&lt;</span>pCur<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//弹栈</span>            pPre <span class="token operator">=</span> pCur<span class="token punctuation">;</span>    <span class="token comment">//下一个</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>   <span class="token comment">//左右孩子没有被访问过</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> pCur<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  <span class="token comment">//R入栈</span>                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> pCur<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> pCur<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  <span class="token comment">//L入栈</span>                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> pCur<span class="token operator">-></span>lchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">///层次遍历///</span>Status <span class="token function">LevelOrderTraverse</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//层次遍历</span>    BiTree p<span class="token punctuation">;</span>    BiTree qu<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment">//定义队列，存放二叉树结点指针</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">;</span>    front <span class="token operator">=</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token comment">//初始化队列</span>    qu<span class="token punctuation">[</span> rear <span class="token punctuation">]</span>   <span class="token operator">=</span> T<span class="token punctuation">;</span>             <span class="token comment">//根结点入队</span>    rear<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> front <span class="token operator">!=</span> rear <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> qu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//队头出队</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span> front <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>       <span class="token comment">//访问队头结点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>   <span class="token comment">//存在左孩子</span>        <span class="token punctuation">&#123;</span>            qu<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span> <span class="token comment">//左孩子入队</span>            rear <span class="token operator">=</span> <span class="token punctuation">(</span> rear <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>   <span class="token comment">//若存在右孩子</span>        <span class="token punctuation">&#123;</span>            qu<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span> <span class="token comment">//右孩子入队</span>            rear <span class="token operator">=</span> <span class="token punctuation">(</span> rear <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遍历输出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的基本操作</title>
      <link href="2021/01/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>2021/01/09/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编程实现书P75  ADT BinaryTree 基本操作20个，<br>用二叉链表结构实现；</p><a id="more"></a><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BiTNode</span><span class="token punctuation">&#123;</span>    ElemType   data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">BiTNode</span>  <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span><span class="token comment">//1.初始化、销毁、清空</span>Status <span class="token function">InitBiTree</span><span class="token punctuation">(</span> BiTree <span class="token operator">&amp;</span>T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">DestroyeBiTree</span><span class="token punctuation">(</span> BiTree <span class="token operator">&amp;</span>T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//销毁//递归</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//递归</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span> <span class="token comment">//存在左子树则先删除左边</span>            <span class="token function">DestroyeBiTree</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span> <span class="token comment">//存在右子树则先删除右边</span>            <span class="token function">DestroyeBiTree</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//释放</span>        T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token comment">//置空</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">CreateBiTree</span><span class="token punctuation">(</span> BiTree <span class="token operator">&amp;</span>T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//先序建立二叉树</span>    ElemType Inp<span class="token punctuation">;</span>    cin <span class="token operator">>></span>Inp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Inp <span class="token operator">==</span> <span class="token string">'#'</span> <span class="token punctuation">)</span>                <span class="token comment">//空结点标志</span>        T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        T <span class="token operator">=</span> <span class="token punctuation">(</span> BiTNode<span class="token operator">*</span> <span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> BiTNode <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//先申请空间</span>        T<span class="token operator">-></span>data <span class="token operator">=</span> Inp<span class="token punctuation">;</span>              <span class="token comment">//赋值</span>        <span class="token function">CreateBiTree</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先 L</span>        <span class="token function">CreateBiTree</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//后 R</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">ClearBiTree</span><span class="token punctuation">(</span> BiTree <span class="token operator">&amp;</span>T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//清空</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//递归</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span> <span class="token comment">//存在左子树则先删除左边</span>            <span class="token function">DestroyeBiTree</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span> <span class="token comment">//存在右子树则先删除右边</span>            <span class="token function">DestroyeBiTree</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2.访问型操作</span><span class="token keyword">bool</span> <span class="token function">BiTreeEmpty</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//查空</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span> T <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">BiTreeDepth</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//T的深度,递归,自下往上</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token comment">//为空则层数为0</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left  <span class="token operator">=</span> <span class="token function">BiTreeDepth</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//记录左右子树的层数</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">BiTreeDepth</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span> left <span class="token operator">></span> right <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span> right <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回值是在左右孩子层数更多的基础上 + 1</span><span class="token punctuation">&#125;</span>Status <span class="token function">Root</span><span class="token punctuation">(</span> BiTree T<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//返回T的根</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">BiTreeEmpty</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">else</span>        e <span class="token operator">=</span> T<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">Value</span><span class="token punctuation">(</span> BiTree T<span class="token punctuation">,</span> BiTree cur_p<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//返回cur_p指向的结点的值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> cur_p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">else</span>        e <span class="token operator">=</span> cur_p<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">Parent</span><span class="token punctuation">(</span> BiTree T<span class="token punctuation">,</span> BiTree cur_p<span class="token punctuation">,</span> BiTree <span class="token operator">&amp;</span>parent <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//返回双亲</span>    parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment">//先置为空</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> cur_p <span class="token operator">==</span> T <span class="token operator">||</span> T <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> cur_p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//利用层次遍历</span>        BiTree p<span class="token punctuation">;</span>        BiTree qu<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//定义队列，存放二叉树结点指针</span>        <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">;</span>        front <span class="token operator">=</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//初始化队列</span>        qu<span class="token punctuation">[</span> rear <span class="token punctuation">]</span>   <span class="token operator">=</span> T<span class="token punctuation">;</span>       <span class="token comment">//根结点入队</span>        rear<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> front <span class="token operator">!=</span> rear <span class="token punctuation">)</span>        <span class="token comment">//不为空进入循环</span>        <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> qu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//队头出队</span>            front <span class="token operator">=</span> <span class="token punctuation">(</span> front <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>lchild <span class="token operator">==</span> cur_p <span class="token operator">||</span> p<span class="token operator">-></span>rchild <span class="token operator">==</span> cur_p <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>   <span class="token comment">//判断该结点是否为双亲结点</span>                parent <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token keyword">return</span> OK<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">///把孩子结点拉入队列</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>   <span class="token comment">//存在左孩子</span>            <span class="token punctuation">&#123;</span>                qu<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span> <span class="token comment">//左孩子入队</span>                rear <span class="token operator">=</span> <span class="token punctuation">(</span> rear <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>   <span class="token comment">//若存在右孩子</span>            <span class="token punctuation">&#123;</span>                qu<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span> <span class="token comment">//右孩子入队</span>                rear <span class="token operator">=</span> <span class="token punctuation">(</span> rear <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">LeftChild</span><span class="token punctuation">(</span> BiTree T<span class="token punctuation">,</span> BiTree cur_p<span class="token punctuation">,</span> BiTree <span class="token operator">&amp;</span>leftChild <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//返回左孩子指针</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> cur_p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> cur_p<span class="token operator">-></span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        leftChild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        leftChild <span class="token operator">=</span> cur_p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">RightChild</span><span class="token punctuation">(</span> BiTree T<span class="token punctuation">,</span> BiTree cur_p<span class="token punctuation">,</span> BiTree <span class="token operator">&amp;</span>rightChild <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//返回右孩子指针</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> cur_p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> cur_p<span class="token operator">-></span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        rightChild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        rightChild <span class="token operator">=</span> cur_p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">LeftBrother</span><span class="token punctuation">(</span> BiTree T<span class="token punctuation">,</span> BiTree cur_p<span class="token punctuation">,</span> BiTree <span class="token operator">&amp;</span>letfBrother <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//返回左兄弟</span>    BiTree p<span class="token punctuation">;</span>                <span class="token comment">//双亲</span>    <span class="token function">Parent</span><span class="token punctuation">(</span> T<span class="token punctuation">,</span> cur_p<span class="token punctuation">,</span> p <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//先找双亲结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  <span class="token comment">//为空</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"没有左兄弟"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>lchild <span class="token operator">==</span> cur_p <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"该结点本身就是其双亲的左孩子"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        letfBrother <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>        <span class="token keyword">return</span> OK<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Status <span class="token function">RightBrother</span><span class="token punctuation">(</span> BiTree T<span class="token punctuation">,</span> BiTree cur_p<span class="token punctuation">,</span> BiTree <span class="token operator">&amp;</span>rightBrother <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//返回右兄弟</span>    BiTree p<span class="token punctuation">;</span>    <span class="token function">Parent</span><span class="token punctuation">(</span> T<span class="token punctuation">,</span> cur_p<span class="token punctuation">,</span> p <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"没有左兄弟"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>rchild <span class="token operator">==</span> cur_p <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"该结点本身就是其双亲的左孩子"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        rightBrother <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        <span class="token keyword">return</span> OK<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">///递归遍历</span>Status <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//先序遍历 rLR</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>T<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Status <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//LrR</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>T<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Status <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//LRr</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span> T<span class="token operator">-></span>lchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span> T<span class="token operator">-></span>rchild <span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>T<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Status <span class="token function">LevelOrderTraverse</span><span class="token punctuation">(</span> BiTree T <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//层次遍历</span>    BiTree p<span class="token punctuation">;</span>    BiTree qu<span class="token punctuation">[</span>MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//定义队列，存放二叉树结点指针</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">;</span>    front <span class="token operator">=</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//初始化队列</span>    qu<span class="token punctuation">[</span> rear <span class="token punctuation">]</span>   <span class="token operator">=</span> T<span class="token punctuation">;</span>       <span class="token comment">//根结点入队</span>    rear<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> front <span class="token operator">!=</span> rear <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> qu<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">//队头出队</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span> front <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>      <span class="token comment">//访问队头结点</span>        <span class="token comment">///拉孩子入队</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  <span class="token comment">//存在左孩子</span>        <span class="token punctuation">&#123;</span>            qu<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span><span class="token comment">//左孩子入队</span>            rear <span class="token operator">=</span> <span class="token punctuation">(</span> rear <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  <span class="token comment">//若存在右孩子</span>        <span class="token punctuation">&#123;</span>            qu<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span><span class="token comment">//右孩子入队</span>            rear <span class="token operator">=</span> <span class="token punctuation">(</span> rear <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> MAX_SIZE<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//3.加工型操作</span>Status <span class="token function">Assign</span><span class="token punctuation">(</span> BiTree T<span class="token punctuation">,</span> BiTree <span class="token operator">&amp;</span>cur_p<span class="token punctuation">,</span> ElemType value <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//赋值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> cur_p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    cur_p<span class="token operator">-></span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">InsertChild</span><span class="token punctuation">(</span> BiTree T<span class="token punctuation">,</span> BiTree cur_p<span class="token punctuation">,</span> <span class="token keyword">int</span> LR<span class="token punctuation">,</span> BiTree c <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//插入树</span>    BiTree p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> cur_p <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> LR <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//左孩子</span>        p <span class="token operator">=</span> cur_p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>        cur_p<span class="token operator">-></span>lchild <span class="token operator">=</span> c<span class="token punctuation">;</span>        c<span class="token operator">-></span>rchild <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">return</span> OK<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> LR <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cur_p<span class="token operator">-></span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//右孩子</span>        p <span class="token operator">=</span> cur_p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        cur_p<span class="token operator">-></span>rchild <span class="token operator">=</span> c<span class="token punctuation">;</span>        c<span class="token operator">-></span>rchild <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">return</span> OK<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>   <span class="token comment">//其他情况均报错</span><span class="token punctuation">&#125;</span>Status <span class="token function">DeleteChild</span><span class="token punctuation">(</span> BiTree T<span class="token punctuation">,</span> BiTree cur_p<span class="token punctuation">,</span> <span class="token keyword">int</span> LR <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//删除左子树或右子树</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> T <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    BiTree p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> LR <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cur_p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> cur_p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>        cur_p<span class="token operator">-></span>lchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">DestroyeBiTree</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> LR <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cur_p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> cur_p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>        cur_p<span class="token operator">-></span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">DestroyeBiTree</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//调用销毁函数</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基本操作 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏矩阵的转置</title>
      <link href="2021/01/09/%E7%B3%BB%E6%95%B0%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BD%AC%E7%BD%AE/"/>
      <url>2021/01/09/%E7%B3%BB%E6%95%B0%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BD%AC%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>输入稀疏矩阵，建立稀疏矩阵三元组顺序结构，<br>实现矩阵的列序遍历转置和快速转置算法。</p><a id="more"></a><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>   <span class="token comment">//  行列</span>    ElemType v<span class="token punctuation">;</span> <span class="token comment">//元素值</span><span class="token punctuation">&#125;</span>Triple<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    Triple arr<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Rows<span class="token punctuation">,</span> Cols<span class="token punctuation">,</span> Nums<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqSMatrix<span class="token punctuation">;</span>Status <span class="token function">CreateSMatrix</span><span class="token punctuation">(</span> SqSMatrix <span class="token operator">&amp;</span>A <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//创建</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> n<span class="token punctuation">,</span> value<span class="token punctuation">,</span> k<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">,</span> rl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"ROWS: "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span>i<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"COLS: "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span>j<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"NUMBERS: "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">></span> i<span class="token operator">*</span>j <span class="token operator">||</span> n <span class="token operator">></span> MAXSIZE<span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span>Rows <span class="token operator">=</span> i<span class="token punctuation">;</span>    A<span class="token punctuation">.</span>Cols <span class="token operator">=</span> j<span class="token punctuation">;</span>    A<span class="token punctuation">.</span>Nums <span class="token operator">=</span> n<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Input the value in row order: "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"&lt;NO."</span><span class="token operator">&lt;&lt;</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">">"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"row: "</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span>r<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"col: "</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span>c<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"value: "</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> r <span class="token operator">&lt;</span> rl <span class="token operator">||</span> r <span class="token operator">>=</span> i <span class="token operator">||</span> c <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> c <span class="token operator">>=</span> j <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>            <span class="token function">exit</span><span class="token punctuation">(</span>ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">=</span> r<span class="token punctuation">;</span>        A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>j <span class="token operator">=</span> c<span class="token punctuation">;</span>        A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> value<span class="token punctuation">;</span>        rl <span class="token operator">=</span> r<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">TraverseSMxtrix</span><span class="token punctuation">(</span> SqSMatrix A <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    ElemType temp <span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>Rows<span class="token punctuation">;</span> a<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>Cols<span class="token punctuation">;</span> b<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>Nums<span class="token punctuation">;</span> c<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">==</span> a <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span>j <span class="token operator">==</span> b <span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    temp <span class="token operator">=</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                    temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>temp<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">TransposeSMxtrix</span><span class="token punctuation">(</span> SqSMatrix A<span class="token punctuation">,</span> SqSMatrix <span class="token operator">&amp;</span>B <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//将稀疏矩阵A转置，结果放在稀疏矩阵B中</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    B<span class="token punctuation">.</span>Rows <span class="token operator">=</span> A<span class="token punctuation">.</span>Cols<span class="token punctuation">;</span>    <span class="token comment">//行列兑换</span>    B<span class="token punctuation">.</span>Cols <span class="token operator">=</span> A<span class="token punctuation">.</span>Rows<span class="token punctuation">;</span>    B<span class="token punctuation">.</span>Nums <span class="token operator">=</span> A<span class="token punctuation">.</span>Nums<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> A<span class="token punctuation">.</span>Nums <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//A中非零元素不为0</span>        q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//B中非零元</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>Cols<span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>   <span class="token comment">//循环列</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>Nums<span class="token punctuation">;</span> p<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>   <span class="token comment">//数组循环</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>j <span class="token operator">==</span> k <span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>   <span class="token comment">//列数相对应时</span>                    B<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">=</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>j<span class="token punctuation">;</span>    <span class="token comment">//B的行对A的列</span>                    B<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>j <span class="token operator">=</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>i<span class="token punctuation">;</span>    <span class="token comment">//B的列对A的行</span>                    B<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token comment">//赋值</span>                    q<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">FastTransposeSMatrix</span><span class="token punctuation">(</span> SqSMatrix A<span class="token punctuation">,</span> SqSMatrix <span class="token operator">&amp;</span>B <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//快速转置</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    B<span class="token punctuation">.</span>Rows <span class="token operator">=</span> A<span class="token punctuation">.</span>Cols<span class="token punctuation">;</span>    <span class="token comment">//行列数对换</span>    B<span class="token punctuation">.</span>Cols <span class="token operator">=</span> A<span class="token punctuation">.</span>Rows<span class="token punctuation">;</span>    B<span class="token punctuation">.</span>Nums <span class="token operator">=</span> A<span class="token punctuation">.</span>Nums<span class="token punctuation">;</span>    ElemType rowNum<span class="token punctuation">[</span>A<span class="token punctuation">.</span>Cols<span class="token punctuation">]</span><span class="token punctuation">,</span> rowStart<span class="token punctuation">[</span>B<span class="token punctuation">.</span>Rows<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> A<span class="token punctuation">.</span>Nums <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token comment">//A中有非零元时进入循环</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">//统计A中每列非0元素个数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>Cols<span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token comment">//初始化</span>            rowNum<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>Nums<span class="token punctuation">;</span> p<span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token comment">//记录每列非0元素个数</span>            rowNum<span class="token punctuation">[</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>j <span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">//计算B中每行三元组的起始位置</span>        rowStart<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>Cols<span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token comment">//第一行的起始位置为0</span>            rowStart<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> rowStart<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> rowNum<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//上一行的非零元个数加上上一行非零元的起始位置</span>        <span class="token comment">//遍历A的三元组，进行矩阵转置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>Nums<span class="token punctuation">;</span> p<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            q <span class="token operator">=</span> rowStart<span class="token punctuation">[</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>j <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//找到行//q为B中起始位置</span>            B<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>i <span class="token operator">=</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>j<span class="token punctuation">;</span>    <span class="token comment">//行列对换</span>            B<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>j <span class="token operator">=</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>i<span class="token punctuation">;</span>            B<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token comment">//赋值</span>            rowStart<span class="token punctuation">[</span> A<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>j <span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token comment">//该行的起始位置自增</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SqSMatrix A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"CREATE: "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">CreateSMatrix</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"BERROR: "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">TraverseSMxtrix</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"转置\n列序遍历"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">TransposeSMxtrix</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TraverseSMxtrix</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"快速遍历"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">FastTransposeSMatrix</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TraverseSMxtrix</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 稀疏矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除重复元素</title>
      <link href="2021/01/09/%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
      <url>2021/01/09/%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>设线性表L，元素值为整型的且存在相同值，<br>分别采用顺序结构和链式结构存储，<br>编写函数，利用原空间，删除重复的元素值。</p><a id="more"></a><h4 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp">Status <span class="token function">RemoveDuplicate</span><span class="token punctuation">(</span> Seqlist <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ElemType temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token punctuation">;</span> k<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">)</span>                    L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//至关重要，删除后j应当停留在被删除的下一个</span>                L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><br/><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><pre class="language-cpp" data-language="cpp"><code class="language-cpp">Status <span class="token function">RemoveDuplicate</span><span class="token punctuation">(</span> SListInfo <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//删除重复元素</span>    LinkList Cur<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>         <span class="token comment">//三个结点，Cur在前是被比较对象，p、q在后面移动</span>    Cur <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> Cur<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  <span class="token comment">//Cur移动到倒数第二个之前</span>    <span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> Cur<span class="token punctuation">;</span>                <span class="token comment">//q在比较对象的前一个，方便删除</span>        p <span class="token operator">=</span> Cur<span class="token operator">-></span>next<span class="token punctuation">;</span>          <span class="token comment">//p指向比较对象</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>data <span class="token operator">==</span> Cur<span class="token operator">-></span>data <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span><span class="token comment">//相等时进行删除</span>                q<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span><span class="token comment">//否则向前移动</span>                p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>                q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        Cur <span class="token operator">=</span> Cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 线性表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 顺序表 </tag>
            
            <tag> 删除 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>就地逆置</title>
      <link href="2020/12/30/%E5%B0%B1%E5%9C%B0%E9%80%86%E7%BD%AE/"/>
      <url>2020/12/30/%E5%B0%B1%E5%9C%B0%E9%80%86%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>设元素值为整型的线性表L，<br>分别采用顺序结构和链式结构存储，<br>编写函数，实现线性表的就地逆置</p></blockquote><a id="more"></a><hr><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp">Status <span class="token function">ReverseList</span><span class="token punctuation">(</span> Seqlist <span class="token operator">&amp;</span>L  <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ElemType temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        temp<span class="token operator">=</span>L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">ListTraverse</span><span class="token punctuation">(</span> Seqlist L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//遍历并输出</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><br/><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp">Status <span class="token function">ReverseList</span><span class="token punctuation">(</span> SListInfo <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkList Pre_N<span class="token punctuation">,</span> Cur_N<span class="token punctuation">,</span> Next_N<span class="token punctuation">;</span>  <span class="token comment">//三个结点</span>    Pre_N <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>           <span class="token comment">//从头结点开始</span>    Cur_N <span class="token operator">=</span> Pre_N<span class="token operator">-></span>next<span class="token punctuation">;</span>    Next_N <span class="token operator">=</span> Cur_N<span class="token operator">-></span>next<span class="token punctuation">;</span>    Pre_N<span class="token operator">-></span>next    <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>          <span class="token comment">//第一个元素的next指向NULL</span>    L<span class="token punctuation">.</span>tail <span class="token operator">=</span> Pre_N<span class="token punctuation">;</span>                 <span class="token comment">//tail指向第一个元素</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> Next_N<span class="token operator">-></span>next<span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token comment">//最后一个结点不是原尾结点时</span>    <span class="token punctuation">&#123;</span>        Cur_N<span class="token operator">-></span>next <span class="token operator">=</span> Pre_N<span class="token punctuation">;</span>        <span class="token comment">//前两个结点的指向反向</span>        Pre_N <span class="token operator">=</span> Cur_N<span class="token punctuation">;</span>              <span class="token comment">//向后移</span>        Cur_N <span class="token operator">=</span> Next_N<span class="token punctuation">;</span>        Next_N <span class="token operator">=</span> Next_N<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Next_N<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>      <span class="token comment">//最后一个结点是原尾结点时（无法移动）</span>    <span class="token punctuation">&#123;</span>        Cur_N<span class="token operator">-></span>next <span class="token operator">=</span> Pre_N<span class="token punctuation">;</span>        <span class="token comment">//前两个结点指向反向</span>        Next_N<span class="token operator">-></span>next <span class="token operator">=</span> Cur_N<span class="token punctuation">;</span>       <span class="token comment">//最后两个结点指向反向</span>        L<span class="token punctuation">.</span>head<span class="token operator">-></span>next <span class="token operator">=</span> Next_N<span class="token punctuation">;</span>      <span class="token comment">//头结点指向原尾结点</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">ListTraverse</span><span class="token punctuation">(</span> SListInfo L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkList p <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 线性结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基本操作 </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表的基本操作</title>
      <link href="2020/12/30/%E2%80%99%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>2020/12/30/%E2%80%99%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用链表存储结构实现线性表的基本操作：</p><blockquote><p>初始化 销毁 清空 检查空表 获取长度<br>输入位置输出值 输入值查找位置<br>获取前一个 获取后一个 遍历并输出<br>更改 插入 删除 </p></blockquote><a id="more"></a><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span>    ElemType        data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">LNode</span>    <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LNode<span class="token punctuation">,</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SListInfo</span><span class="token punctuation">&#123;</span>    LinkList head<span class="token punctuation">;</span>    LinkList tail<span class="token punctuation">;</span>    LNode    <span class="token operator">*</span>pCurNode<span class="token punctuation">;</span>    <span class="token keyword">int</span>      length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SListInfo<span class="token punctuation">;</span>Status <span class="token function">InitList</span><span class="token punctuation">(</span> SListInfo <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L<span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>tail       <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>pCurNode   <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length     <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">CreateList</span><span class="token punctuation">(</span> SListInfo <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        LNode<span class="token operator">*</span> Node <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>tail<span class="token operator">-></span>next <span class="token operator">=</span> Node<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>tail <span class="token operator">=</span> Node<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">DestroyList</span><span class="token punctuation">(</span> SListInfo <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> L<span class="token punctuation">.</span>head<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        LinkList p<span class="token punctuation">;</span>        p <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>head<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>head      <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>tail      <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>pCurNode  <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length    <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">ClearList</span><span class="token punctuation">(</span> SListInfo <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> L<span class="token punctuation">.</span>head<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        LinkList p<span class="token punctuation">;</span>        p <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>head<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>tail       <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>pCurNode   <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length    <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">///访问型操作///</span>Status <span class="token function">ListEmpty</span><span class="token punctuation">(</span> SListInfo L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">ListLength</span><span class="token punctuation">(</span> SListInfo L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">GetElem</span><span class="token punctuation">(</span> SListInfo <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkList p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length <span class="token punctuation">)</span>        <span class="token keyword">return</span> PARA_ERROR<span class="token punctuation">;</span>    p <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> j <span class="token operator">&lt;</span> i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    e <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>pCurNode <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">LocateElem</span><span class="token punctuation">(</span> SListInfo <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> ElemType e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    LinkList p <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>data <span class="token operator">==</span> e <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            L<span class="token punctuation">.</span>pCurNode <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//break;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">PriorElem</span><span class="token punctuation">(</span> SListInfo L<span class="token punctuation">,</span> ElemType e<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>pre_e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkList q <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    LinkList p <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token operator">-></span>data <span class="token operator">==</span> e <span class="token punctuation">)</span>        <span class="token keyword">return</span> PARA_ERROR<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token comment">//有待考量</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>data <span class="token operator">==</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            pre_e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">;</span>            <span class="token keyword">return</span> OK<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">NextElem</span><span class="token punctuation">(</span> SListInfo L<span class="token punctuation">,</span> ElemType e<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>next_e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkList p <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>tail<span class="token operator">-></span>data <span class="token operator">==</span> e <span class="token punctuation">)</span>        <span class="token keyword">return</span> PARA_ERROR<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> p<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token comment">//有待考量</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> p<span class="token operator">-></span>data <span class="token operator">==</span> e <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            next_e <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token operator">-></span>data<span class="token punctuation">;</span>            <span class="token keyword">return</span> OK<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">ListTraverse</span><span class="token punctuation">(</span> SListInfo L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    LinkList p <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">-></span>data<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">///加工型操作///</span>Status <span class="token function">SetElem</span><span class="token punctuation">(</span> SListInfo <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L<span class="token punctuation">.</span>pCurNode <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> j<span class="token operator">&lt;</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        L<span class="token punctuation">.</span>pCurNode <span class="token operator">=</span> L<span class="token punctuation">.</span>pCurNode<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>pCurNode<span class="token operator">-></span>next<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">InsertElem</span><span class="token punctuation">(</span> SListInfo <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> PARA_ERROR<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>pCurNode <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> j<span class="token operator">&lt;</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        L<span class="token punctuation">.</span>pCurNode <span class="token operator">=</span> L<span class="token punctuation">.</span>pCurNode<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//申请新node</span>    LNode <span class="token operator">*</span>s<span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> s <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token comment">//s接在pCurNode后</span>    s<span class="token operator">-></span>next             <span class="token operator">=</span> L<span class="token punctuation">.</span>pCurNode<span class="token operator">-></span>next<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>pCurNode<span class="token operator">-></span>next    <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token comment">//若当前为尾结点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>pCurNode <span class="token operator">==</span> L<span class="token punctuation">.</span>tail <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        L<span class="token punctuation">.</span>tail <span class="token operator">=</span> s<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>tail<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//修改链表长度</span>    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">DeleteElem</span><span class="token punctuation">(</span> SListInfo <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">></span> L<span class="token punctuation">.</span>length <span class="token operator">||</span> i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> PARA_ERROR<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>pCurNode <span class="token operator">=</span> L<span class="token punctuation">.</span>head<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> j <span class="token operator">&lt;</span> i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        L<span class="token punctuation">.</span>pCurNode <span class="token operator">=</span> L<span class="token punctuation">.</span>pCurNode<span class="token operator">-></span>next<span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    e <span class="token operator">=</span> L<span class="token punctuation">.</span>pCurNode<span class="token operator">-></span>next<span class="token operator">-></span>data<span class="token punctuation">;</span>  <span class="token comment">//赋值</span>    LNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>pCurNode<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token comment">//若删除的为尾结点</span>    <span class="token punctuation">&#123;</span>        L<span class="token punctuation">.</span>tail <span class="token operator">=</span> L<span class="token punctuation">.</span>pCurNode<span class="token punctuation">;</span>        p <span class="token operator">=</span> L<span class="token punctuation">.</span>pCurNode<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>tail<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> OK<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    p <span class="token operator">=</span> L<span class="token punctuation">.</span>pCurNode<span class="token operator">-></span>next<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>pCurNode<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 线性表 </category>
          
          <category> 基本操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 顺序表 </tag>
            
            <tag> 基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序表</title>
      <link href="2020/12/10/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>2020/12/10/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用顺序表存储结构实现线性表的基本操作：</p><blockquote><p>初始化 销毁 清空 检查空表 获取长度<br>输入位置输出值 输入值查找位置<br>获取前一个 获取后一个 遍历并输出<br>更改 插入 删除 </p></blockquote><a id="more"></a><hr><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//初始化，销毁，清空</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Seqlist</span><span class="token punctuation">&#123;</span>   <span class="token comment">//初始化顺序表</span>    ElemType <span class="token operator">*</span>pData<span class="token punctuation">;</span>    <span class="token comment">//动态存储空间的基地址</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>         <span class="token comment">//数据元素数目</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>           <span class="token comment">//存储空间大小</span><span class="token punctuation">&#125;</span>Seqlist<span class="token punctuation">;</span>Status <span class="token function">InitList</span><span class="token punctuation">(</span> Seqlist <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L<span class="token punctuation">.</span>pData <span class="token operator">=</span> <span class="token punctuation">(</span>ElemType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LISTINITSIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//申请存储空间</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>pData <span class="token operator">==</span><span class="token constant">NULL</span> <span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存储空间申请失败</span>    L<span class="token punctuation">.</span>size <span class="token operator">=</span> LISTINITSIZE<span class="token punctuation">;</span>                      <span class="token comment">//当前已分配的存储空间大小</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                               <span class="token comment">//存储数据元素个数为0</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//  InitList</span>Status <span class="token function">CreateList</span><span class="token punctuation">(</span> Seqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i <span class="token punctuation">)</span>  <span class="token comment">//通过</span><span class="token punctuation">&#123;</span>   <span class="token comment">//创建一个长度为i的非空表</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>        L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//为方便测试，令元素为平方运算</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">DestroyList</span><span class="token punctuation">(</span> Seqlist <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//销毁顺序表</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>pData <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">free</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>pData <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    L<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//DetroyeList</span>Status <span class="token function">ClearList</span><span class="token punctuation">(</span> Seqlist <span class="token operator">&amp;</span>L <span class="token punctuation">)</span> <span class="token comment">//通过</span><span class="token punctuation">&#123;</span>   <span class="token comment">//清空顺序表</span>    L<span class="token punctuation">.</span>length  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//ClearList</span><span class="token comment">//访问型操作</span>Status <span class="token function">ListEmpty</span><span class="token punctuation">(</span> Seqlist L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//是否为空表</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ListLength</span><span class="token punctuation">(</span> Seqlist <span class="token operator">&amp;</span>L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">GetElem</span><span class="token punctuation">(</span> Seqlist L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//获取第i个元素</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length <span class="token punctuation">)</span>     <span class="token comment">//检查合法性</span>        <span class="token keyword">return</span> PARA_ERROR<span class="token punctuation">;</span>    e <span class="token operator">=</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//GetElem</span>Status <span class="token function">LocateElem</span><span class="token punctuation">(</span> Seqlist L<span class="token punctuation">,</span> ElemType e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//元素e的位置</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> e <span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//LocateElem</span>Status <span class="token function">PriorElem</span><span class="token punctuation">(</span> Seqlist L<span class="token punctuation">,</span> ElemType cur_e<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>pre_e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//返回前驱元素</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur_e <span class="token punctuation">)</span>       <span class="token comment">//为头部元素时</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> cur_e <span class="token punctuation">)</span>            pre_e <span class="token operator">=</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">//PriorElem</span>Status <span class="token function">NextElem</span><span class="token punctuation">(</span> Seqlist L<span class="token punctuation">,</span> ElemType cur_e<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>next_e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//返回后继元素</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> cur_e <span class="token punctuation">)</span>            next_e <span class="token operator">=</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span> L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">==</span> cur_e <span class="token punctuation">)</span>    <span class="token comment">//为尾部元素时</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">ListTraverse</span><span class="token punctuation">(</span> Seqlist L <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//遍历并输出</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//加工型操作</span>Status <span class="token function">SetElem</span><span class="token punctuation">(</span> Seqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//赋值</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> i<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length <span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>PARA_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">InsertElem</span><span class="token punctuation">(</span> Seqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//插入</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> i<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>PARA_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>length <span class="token operator">>=</span> L<span class="token punctuation">.</span>size <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ElemType <span class="token operator">*</span>newbase <span class="token operator">=</span> <span class="token punctuation">(</span> ElemType<span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token function">realloc</span><span class="token punctuation">(</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">,</span> <span class="token punctuation">(</span> L<span class="token punctuation">.</span>size<span class="token operator">+</span>LISTINCREMENT <span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span> ElemType <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> newbase <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>   <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        L<span class="token punctuation">.</span>pData <span class="token operator">=</span> newbase<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>size <span class="token operator">+=</span> LISTINCREMENT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//移动</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">>=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span> <span class="token punctuation">)</span>        L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Status <span class="token function">DeleteElem</span><span class="token punctuation">(</span> Seqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType <span class="token operator">&amp;</span>e <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//删除</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> i<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length <span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>PARA_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>    e <span class="token operator">=</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span> j<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>        L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>pData<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 线性表 </category>
          
          <category> 顺序表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 顺序表 </tag>
            
            <tag> 基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建笔记</title>
      <link href="2020/06/27/%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
      <url>2020/06/27/%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>record</p><a id="more"></a><h3 id="搭建HEXO-GitHub-时踩过的坑"><a href="#搭建HEXO-GitHub-时踩过的坑" class="headerlink" title="搭建HEXO + GitHub 时踩过的坑"></a>搭建HEXO + GitHub 时踩过的坑</h3><h4 id="jsDeliver-Github-使用方法"><a href="#jsDeliver-Github-使用方法" class="headerlink" title="jsDeliver+Github 使用方法"></a>jsDeliver+Github 使用方法</h4><ol><li>新建GitHub仓库 CDN</li></ol><br/><ol start="2"><li>克隆到本地<br>在本地CDN目录上 git bash here</li></ol><br/><ol start="3"><li><p>上传资源</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">git status                    <span class="token comment">//查看状态</span>git <span class="token function">add</span> <span class="token punctuation">(</span>文件路径<span class="token punctuation">)</span> <span class="token punctuation">.</span>          <span class="token comment">//添加所有文件到暂存区</span>git commit <span class="token operator">-</span>m <span class="token string">"第n次提交"</span>     <span class="token comment">//把文件提交到仓库</span>git push                     <span class="token comment">//推送至远程仓库</span></code></pre><br/></li><li><p>release<br>要自定义发布版本号</p></li></ol><br/><ol start="5"><li><p>通过jsDeliver引用资源</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">https<span class="token operator">:</span><span class="token comment">//cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</span></code></pre><h4 id="预览和GitHub-Pages不同"><a href="#预览和GitHub-Pages不同" class="headerlink" title="预览和GitHub Pages不同"></a>预览和GitHub Pages不同</h4></li><li><p>原因:branch错误<br>不要在master分支上部署pages服务。<br>用hexo编译生成public文件夹后，将public文件夹推到另一个分支</p></li><li><p>具体解决</p><ol><li>仓库中新建分支ph-pages</li><li>选择该分支</li><li>/blog根目录下的_config.yml中找到branch，将master改为ph-pages</li><li>/blog 下 git bash here，hexo clen &amp;&amp; hexo g &amp;&amp; hexo d</li></ol></li></ol><br/><p><a href="https://blog.csdn.net/GAI159/article/details/105128186/?ops_request_misc=&request_id=&biz_id=102&utm_term=hexo%E9%A2%84%E8%A7%88%E5%92%8C%E7%94%9F%E6%88%90%E4%B8%8D%E5%90%8C&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-105128186" title="解决hexo本地与部署不一致问题">参考资料</a></p><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><ul><li>安装插件<ol><li>把/blog/_config.yml 里的post_asset_folder:设置为true</li><li><blockquote><p>npm install hexo-asset-image –save</p></blockquote></li><li>文章xxx.md所在文件夹内有一同名的文件夹</li></ol></li><li>上传图片<ol start="4"><li>把图片放到上述文件夹内</li><li>在文章中用  <code>![你想输入的替代文字](xxxx/图片名.jpg)</code></li></ol></li></ul><h4 id="使用prism-plugin"><a href="#使用prism-plugin" class="headerlink" title="使用prism-plugin"></a>使用prism-plugin</h4><ul><li>使用方法<ul><li>```xxx (语言)<br>[代码块 ]<br>```</li></ul></li><li>语言和对应引用语<ul><li><a href="https://prismjs.com/#supported-languages" title="Supported languages">支持的语言</a></li></ul></li></ul><h4 id="特殊符号需要转义"><a href="#特殊符号需要转义" class="headerlink" title="特殊符号需要转义"></a>特殊符号需要转义</h4><ul><li><p>加 \ 进行转义<br>比如方括号[]<br>则应书写为:  <code>\[\]</code></p><blockquote><p>适用于<br>\ ` * _ {} [] () # + - . !</p></blockquote></li><li><p>反引号引用<br>比如我想要表示三个连用的反引号 <code>```</code>时<br>则应书写为: `` ``` ``</p></li></ul><h4 id="文字居中-amp-amp-图片大小位置"><a href="#文字居中-amp-amp-图片大小位置" class="headerlink" title="文字居中 &amp;&amp; 图片大小位置"></a>文字居中 &amp;&amp; 图片大小位置</h4><ol><li><p>文字</p></li><li><p>居中 </p><blockquote><p><code>&lt;center&gt;我在中间了吗&lt;/center&gt;</code></p></blockquote></li><li><p>左(右)对齐</p><blockquote><p><code>&lt;p align=&quot;left&quot;&gt;左边还是右边嘞&lt;/p&gt;</code></p></blockquote></li><li><p>图片</p></li><li><p>大小</p><blockquote><p><code>&lt;img src=&quot;./xxx.png&quot; width = &quot;300&quot; height = &quot;200&quot; alt=&quot;图片名称&quot;/&gt;</code></p></blockquote></li><li><p>位置</p><blockquote><p><code>&lt;div align=&quot;center&quot;&gt;</code><br> <code>&lt;img src=&quot;图片地址&quot; height=&quot;300px&quot; alt=&quot;图片说明&quot; &gt;</code><br> <code>&lt;/div&gt;</code></p></blockquote><p>通过更改align属性可以修改图片左对齐、居中或者右对齐</p></li></ol><h4 id="更改文字正文页面的透明度"><a href="#更改文字正文页面的透明度" class="headerlink" title="更改文字正文页面的透明度"></a>更改文字正文页面的透明度</h4><p>在 <code>\themes\hexo-theme-yun-dev\source\css\_global\index.styl</code>文件下<br>找到 <code>--post-block-bg-color: white;</code><br>改为 <code>--post-block-bg-color: rgba(255,255,255,0.7);</code><br>0.7 指的是透明度</p><blockquote><p>以上为light模式下，类似的，dark在 <code>global/dark.styl </code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
